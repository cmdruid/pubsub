name: Publish a new release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
        
      # Verify Java installation and set JAVA_HOME
      - name: Verify Java installation
        run: |
          echo "JAVA_HOME: $JAVA_HOME"
          java -version
          echo "Setting JAVA_HOME for Gradle"
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "org.gradle.java.home=$JAVA_HOME" >> gradle.properties
          echo "Current gradle.properties content:"
          cat gradle.properties
          echo "Environment variables:"
          env | grep -i java || true

      # Setup Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Cache Gradle packages (with Java 21 fix)
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-java21-fix-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-java21-fix-
            ${{ runner.os }}-gradle-

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      # Clear Gradle daemon and check setup
      - name: Clear Gradle daemon and check setup
        run: |
          echo "Stopping any existing Gradle daemons:"
          ./gradlew --stop || true
          echo "Gradle wrapper version:"
          ./gradlew --version
          echo "Java version being used by Gradle:"
          ./gradlew -q javaToolchains || echo "javaToolchains task not available"

      # Parse git tag and determine version
      - name: Parse tag and set version
        id: get_version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/v}
          if [[ "$TAG_NAME" == *"-dev"* ]] || [[ "$TAG_NAME" == *"-beta"* ]]; then
            echo "VERSION=${TAG_NAME}" >> $GITHUB_ENV
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
          else
            echo "VERSION=${TAG_NAME}" >> $GITHUB_ENV
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          fi

      # Update version in build.gradle.kts
      - name: Update version in build.gradle.kts
        run: |
          sed -i "s/versionName = \".*\"/versionName = \"${{ env.VERSION }}\"/" app/build.gradle.kts

      # Build release APK
      - name: Build release APK
        run: |
          echo "Building release APK with Java: $JAVA_HOME"
          ./gradlew assembleRelease --stacktrace
        env:
          JAVA_HOME: ${{ env.JAVA_HOME }}

      # Extract changelog entry for the version
      - name: Extract changelog
        id: changelog
        run: |
          # Always look for base version in changelog (strip prerelease suffix if present)
          if [[ "${{ env.VERSION }}" == *"-dev"* ]] || [[ "${{ env.VERSION }}" == *"-alpha"* ]] || [[ "${{ env.VERSION }}" == *"-rc"* ]]; then
            BASE_VERSION=$(echo "${{ env.VERSION }}" | sed 's/-dev.*//;s/-alpha.*//;s/-rc.*//')
          else
            BASE_VERSION=${{ env.VERSION }}
          fi
          
          # Check if CHANGELOG.md exists, if not create a simple changelog entry
          if [ ! -f "CHANGELOG.md" ]; then
            echo "CHANGELOG=Release v${{ env.VERSION }}" >> $GITHUB_ENV
          else
            # Use awk with string comparison to avoid regex escaping issues
            CHANGELOG=$(awk -v version="$BASE_VERSION" '
              BEGIN { target = "## [" version "]" }
              $0 == target { found = 1; next }
              found && substr($0, 1, 4) == "## [" { exit }
              found && NF > 0 { print }
            ' CHANGELOG.md)
            if [ -z "$CHANGELOG" ]; then
              echo "CHANGELOG=Release v${{ env.VERSION }}" >> $GITHUB_ENV
            else
              echo "CHANGELOG<<EOF" >> $GITHUB_ENV
              echo "$CHANGELOG" >> $GITHUB_ENV
              echo "EOF" >> $GITHUB_ENV
            fi
          fi

      # Create GitHub release with APK
      - name: Create Release
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
          if [ "${{ env.IS_PRERELEASE }}" = "true" ]; then
            gh release create "v${{ env.VERSION }}" \
              --title "Release v${{ env.VERSION }}" \
              --notes "${{ env.CHANGELOG }}" \
              --prerelease \
              "$APK_PATH"
          else
            gh release create "v${{ env.VERSION }}" \
              --title "Release v${{ env.VERSION }}" \
              --notes "${{ env.CHANGELOG }}" \
              "$APK_PATH"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

